{"version":3,"sources":["features/counter/counterSlice.js","features/todos/todoSlice.js","app/store.js","DataEntry.jsx","Todo.jsx","TodoApp.jsx","App.jsx","index.jsx"],"names":["slice","createSlice","name","initialState","value","reducers","increment","state","decrement","actions","selectCount","counter","id","uuid","done","addToDo","action","push","payload","removeToDo","filter","el","editToDo","map","selectTodo","todos","configureStore","reducer","counterReducer","todoReducer","DataEntry","props","inputValue","onChangeInput","onPressEnterInput","onClickButton","buttonText","className","style","height","fontSize","placeholder","onChange","event","target","onPressEnter","marginLeft","backgroundColor","color","border","onClick","Todo","React","memo","element","updateTodo","useState","edit","setEdit","editValue","setEditValue","complete","setComplete","dispatch","useDispatch","editElement","editSubmit","useEffect","evt","Fragment","type","checked","icon","faPen","margin","faTrash","ToDoApp","count","useSelector","todoList","setInputValue","allTodo","key","e","App","render","location","exact","path","component","TodoApp","rootElement","document","getElementById","ReactDOM","store"],"mappings":"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","file":"static/js/main.e2848549.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const slice = createSlice({\n  name: \"counter\",\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = slice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport default slice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const slice = createSlice({\n  name: \"todos\",\n  initialState: {\n    value: [\n      { id: uuid(), value: \"Keep learning\" },\n      { id: uuid(), value: \"Have a coffee\" },\n      { id: uuid(), value: \"Climb a mountain\", done: true },\n      { id: uuid(), value: \"Read a book\" },\n    ],\n  },\n  reducers: {\n    addToDo: (state, action) => {\n      state.value.push(action.payload);\n    },\n    removeToDo: (state, action) => {\n      state.value = state.value.filter((el) => el.id !== action.payload);\n    },\n    editToDo: (state, action) => {\n      state.value = state.value.map((el) => {\n        el =\n          el.id === action.payload?.id\n            ? { ...el, value: action.payload.value }\n            : { ...el };\n        return el;\n      });\n    },\n  },\n});\n\nexport const { addToDo, removeToDo, editToDo } = slice.actions;\n\nexport const selectTodo = (state) => state.todos.value;\n\nexport default slice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport todoReducer from \"../features/todos/todoSlice\";\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n    todos: todoReducer,\n  },\n});\n","import React from \"react\";\n\nimport { Input, Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nimport \"./styles.css\";\n\nconst DataEntry = (props) => {\n  const {\n    inputValue,\n    onChangeInput,\n    onPressEnterInput,\n    onClickButton,\n    buttonText,\n  } = props;\n\n  return (\n    <div className=\"inputStyle\">\n      <Input\n        style={{ height: \"40px\", fontSize: \"20px\" }}\n        placeholder=\"Write...\"\n        value={inputValue}\n        onChange={(event) => onChangeInput(event.target.value)}\n        onPressEnter={(event) => onPressEnterInput(event.target.value)}\n      />\n      <Button\n        style={{\n          height: \"40px\",\n          marginLeft: \"15px\",\n          backgroundColor: \"#ffff\",\n          color: \"black\",\n          border: \"2px solid #f2a899\",\n        }}\n        onClick={() => onClickButton()}\n      >\n        <p style={{ fontSize: \"20px\", color: \"#f2a899\" }}>{buttonText}</p>\n      </Button>\n    </div>\n  );\n};\n\nexport default DataEntry;\n","import React, { useState, useEffect } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport DataEntry from \"./DataEntry\";\nimport \"antd/dist/antd.css\";\nimport { useDispatch } from \"react-redux\";\nimport \"./todo.css\";\nimport { decrement, increment } from \"./features/counter/counterSlice\";\n\nconst Todo = React.memo((props) => {\n  const { element, updateTodo, removeToDo } = props;\n  const [edit, setEdit] = useState(false);\n  const [editValue, setEditValue] = useState(element.value);\n  const [complete, setComplete] = useState(element.done || false);\n  const dispatch = useDispatch();\n\n  const editElement = () => {\n    setEdit(!edit);\n  };\n\n  const removeElement = (evt) => {\n    removeToDo(element.id);\n    if (complete) {\n      dispatch(decrement());\n    }\n  };\n\n  const editOnChange = (evt) => {\n    setEditValue(evt);\n  };\n\n  const editSubmit = () => {\n    if (editValue) {\n      editElement();\n      updateTodo(element.id, editValue);\n    }\n  };\n\n  useEffect(() => {\n    if (complete) {\n      dispatch(increment());\n    }\n  }, [complete, dispatch]);\n\n  return (\n    <div id={element.id} className=\"todoContainer\">\n      {edit ? (\n        <DataEntry\n          inputValue={editValue}\n          onChangeInput={editOnChange}\n          onPressEnterInput={editSubmit}\n          onClickButton={editSubmit}\n          buttonText=\"Edit\"\n        />\n      ) : (\n        <React.Fragment>\n          <input\n            type=\"checkbox\"\n            className=\"customizedCheck\"\n            checked={complete}\n            onChange={() => setComplete(!complete)}\n          />\n          <p className={complete ? \"textTodo completedTodo\" : \"textTodo\"}>\n            {element.value}\n          </p>\n          <div className=\"iconContainer\" onClick={() => editElement()}>\n            <div className=\"icon\">\n              <FontAwesomeIcon\n                icon={faPen}\n                style={{\n                  fontSize: \"20px\",\n                  color: \"cornflowerblue\",\n                  margin: \"0 auto\",\n                }}\n              />\n            </div>\n            <div className=\"icon\" onClick={() => removeElement()}>\n              <FontAwesomeIcon\n                icon={faTrash}\n                style={{\n                  fontSize: \"20px\",\n                  color: \"cornflowerblue\",\n                  margin: \"0 auto\",\n                }}\n              />\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n});\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport DataEntry from \"./DataEntry\";\nimport \"antd/dist/antd.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectCount } from \"./features/counter/counterSlice\";\nimport {\n  selectTodo,\n  addToDo,\n  editToDo,\n  removeToDo,\n} from \"./features/todos/todoSlice\";\nimport { useDispatch } from \"react-redux\";\n\nimport Todo from \"./Todo\";\nimport \"./styles.css\";\n\nconst ToDoApp = () => {\n  const count = useSelector(selectCount);\n  const todoList = useSelector(selectTodo);\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const inputChange = (e) => {\n    if (e) {\n      const el = { id: uuid(), value: e };\n      dispatch(addToDo(el));\n      setInputValue(\"\");\n    }\n  };\n\n  const buttonChange = () => {\n    if (inputValue) {\n      const el = { id: uuid(), value: inputValue };\n      dispatch(addToDo(el));\n      setInputValue(\"\");\n    }\n  };\n  const handleChange = (evt) => {\n    setInputValue(evt);\n  };\n\n  const updateTodo = (id, value) => {\n    dispatch(editToDo({ id: id, value: value }));\n  };\n\n  const allTodo = todoList.map((el) => {\n    return (\n      <Todo\n        key={\"todo_\" + el.id}\n        element={el}\n        updateTodo={updateTodo}\n        removeToDo={(id) => dispatch(removeToDo(id))}\n      />\n    );\n  });\n\n  return (\n    <>\n      <div className=\"container\">\n        <p className=\"title\">To do List</p>\n        <p className=\"title sub\"> Completed: {count}</p>\n\n        <div className=\"content\">\n          <DataEntry\n            inputValue={inputValue}\n            onChangeInput={handleChange}\n            onPressEnterInput={inputChange}\n            onClickButton={buttonChange}\n            buttonText=\"Add\"\n          />\n\n          {allTodo}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ToDoApp;\n","import { Route, Switch } from \"react-router-dom\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport TodoApp from \"./TodoApp\";\nexport default function App() {\n  return (\n    <Route\n      render={({ location }) => (\n        <Switch location={location}>\n          <Route exact path=\"/\" component={TodoApp} />\n        </Switch>\n      )}\n    />\n  );\n}\n","import { HashRouter } from \"react-router-dom\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./app/store\";\n\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n\n  rootElement\n);\n"],"sourceRoot":""}